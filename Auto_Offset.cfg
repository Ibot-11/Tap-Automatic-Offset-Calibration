# Auto-Offset-Calibration by Ibot_11
# Github: https://github.com/Ibot-11/Tap-Automatic-Offset-Calibration
# Licensed under AGPL-3.0 license
# Version 2.0.0

#  ___   _          _              
# | _ \ | |  __ _  | |_   ___   ___
# |  _/ | | / _` | |  _| / -_) (_-<
# |_|   |_| \__,_|  \__| \___| /__/
#                                  
[gcode_macro TEXTURED_PLATE]
description: Offset correction for textured plates
variable_offset_correction : 0.02 # set your value here
variable_plate_name: "TEXTURED_PLATE" # set your macro name here! Must be the same!
gcode:
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=plate_name VALUE="'{plate_name}'"
    { action_respond_info('Correction value for %s loaded. Correction: +%.3f' % (plate_name, offset_correction)) }

[gcode_macro SMOOTH_PLATE]
description: Offset correction for smooth plates
variable_offset_correction : 0.06 # set your value here
variable_plate_name: "SMOOTH_PLATE" # set your macro name here! Must be the same!
gcode:
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=plate_name VALUE="'{plate_name}'"
    { action_respond_info('Correction value for %s loaded. Correction: +%.3f' % (plate_name, offset_correction)) }


#  ___             _        _                
# | __|  _ _    __| |  ___ | |_   ___   _ __ 
# | _|  | ' \  / _` | (_-< |  _| / _ \ | '_ \
# |___| |_||_| \__,_| /__/  \__| \___/ | .__/
#                                      |_|   
[gcode_macro POSITION_Z_ENDSTOP]
description: Dummy macro to set the endstop position
variable_endstop_x : -999 # set your endstop X position
variable_endstop_y : -999 # set your endstop y position
gcode:


#    _            _              ___     __    __              _   
#   /_\    _  _  | |_   ___     / _ \   / _|  / _|  ___  ___  | |_ 
#  / _ \  | || | |  _| / _ \   | (_) | |  _| |  _| (_-< / -_) |  _|
# /_/ \_\  \_,_|  \__| \___/    \___/  |_|   |_|   /__/ \___|  \__|
#                                                                                                                                    
[gcode_macro AUTO_OFFSET_VARIABLES]
description: Just saves variables and resets them
### AUTO OFFSET CALIBRATION SETTINGS ###
variable_enable_thermal_compensation: True
variable_thermal_expansion_factor: 0.000375 # !!! Use THERMAL_COMPENSATION_CALIBRATION for calibration !!!
variable_default_samples: 3
variable_max_adjustment : 0.5 # Define max adjustment | 0.5 is default
variable_max_deviation: 0.005 # max allowed devition between samples. Errors if greater
variable_probe_temp: 150 # default probe temperature
variable_plate_name: "TEXTURED_PLATE" # Default plate name (macro name)
variable_nozzle_cleaning_macro: "CLEAN_NOZZLE" # Set your macro for nozzle cleaning

### DO NOT EDIT BELOW ###
variable_sample_results: "" # Do not edit
variable_auto_offset_state : False # Used for a safety feature. Do not edit!
variable_last_average: 0
variable_extruder_temp: 0
gcode:
    ### Reset all variables that changes while the macro runs ###
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=sample_results VALUE="''" 
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=auto_offset_state VALUE=False
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=extruder_temp VALUE=0


#  _____   _                                 _      ___                                                 _     _              
# |_   _| | |_    ___   _ _   _ __    __ _  | |    / __|  ___   _ __    _ __   ___   _ _    ___  __ _  | |_  (_)  ___   _ _  
#   | |   | ' \  / -_) | '_| | '  \  / _` | | |   | (__  / _ \ | '  \  | '_ \ / -_) | ' \  (_-< / _` | |  _| | | / _ \ | ' \ 
#   |_|   |_||_| \___| |_|   |_|_|_| \__,_| |_|    \___| \___/ |_|_|_| | .__/ \___| |_||_| /__/ \__,_|  \__| |_| \___/ |_||_|
#                                                                      |_|                                                   
[gcode_macro THERMAL_COMPENSATION_VARIABLES]
description: Just saves variables and resets them
### THERMAL EXPANSION CALIBRATION SETTINGS ###
variable_calibration_temp: 295 # default calibration temperature
variable_default_thermal_comp_samples: 2
variable_default_auto_offset_samples: 4
variable_max_deviation: 0.01 # max allowed devition between samples. Errors if greater

### DO NOT EDIT BELOW ###
variable_sample_results: "" # Do not edit
variable_thermal_compensation_state : False # Used for a safety feature. Do not edit!
gcode:
    ### Reset all variables that changes while the macro runs ###
    SET_GCODE_VARIABLE MACRO=THERMAL_COMPENSATION_VARIABLES VARIABLE=sample_results VALUE="''" 
    SET_GCODE_VARIABLE MACRO=THERMAL_COMPENSATION_VARIABLES VARIABLE=thermal_compensation_state VALUE=False


############################################################################################################################################################################################################################################
#  __  __                              
# |  \/  |  __ _   __   _ _   ___   ___
# | |\/| | / _` | / _| | '_| / _ \ (_-<
# |_|  |_| \__,_| \__| |_|   \___/ /__/
#
[gcode_macro AUTO_OFFSET]
description: Calibrate your first layer
gcode:
    {% set auto_offset = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use auto_offset instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> auto_offset.samples
    {% set plate = printer['gcode_macro ' + auto_offset.plate_name] %} # plate.offset_correction for example will give you the correction value of the active plate (auto_offset.plate_name)
    {% set th = printer.toolhead %}

    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(-1)|float %} # required for thermal compensation. -1 is a dummy value to trigger a error. If undefined statement does not work
    {% set SAMPLES = params.SAMPLES|default(auto_offset.default_samples)|int %} # params sample amount. Use defined default if not set
    {% set PROBE_OFFSET = printer.configfile.settings.probe.z_offset %} # current probe offset

    {% if EXTRUDER_TEMP == -1 and auto_offset.enable_thermal_compensation %}
      { action_raise_error('In order to run this macro with thermal compensation enabled, you have to specify EXTRUDER_TEMP.') } # errors if runned without extruder temperature and thermal compensation enabled
    {% endif %}

    AUTO_OFFSET_VARIABLES # reset variables

    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=auto_offset_state VALUE=True # set state to true. This is a feature that prevents running other AUTO_OFFSET macros directly. Like AUTO_OFFSET_ADJUSTMENT
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=extruder_temp VALUE={EXTRUDER_TEMP}

    { action_respond_info('Selected Plate: %s. Correction value: +%.3f' % (auto_offset.plate_name, plate.offset_correction)) } # show selected plate

    {% if printer.toolhead.homed_axes != "xyz" %} #Smarthome. Homes if not homed
        G28
    {% endif %}

    {% if printer.extruder.temperature < auto_offset.probe_temp - 3 or printer.extruder.target < auto_offset.probe_temp or printer.extruder.temperature > auto_offset.probe_temp + 3 or printer.extruder.target > auto_offset.probe_temp %} # heat nozzle if not at probing temp already or target is below probe temp
    G90
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 10} Z30 F30000 # park at rear center
    M109 S{auto_offset.probe_temp} # heat up to probe temp
    G4 P10000 # wait 10 sec to stabilize
    {% endif %}

    {auto_offset.nozzle_cleaning_macro} # Use nozzle cleaning macro
    G90
    G0 X{printer["gcode_macro POSITION_Z_ENDSTOP"].endstop_x} Y{printer["gcode_macro POSITION_Z_ENDSTOP"].endstop_y} Z25 F30000 # move to endstop position
    SET_GCODE_OFFSET Z=0 # remove any correction before calibration
    PROBE SAMPLES=5 SAMPLES_TOLERANCE_RETRIES=3 # some probes to squish away any material before doing measurements

    G4 P1000 # wait a second
    QUERY_ENDSTOPS # must query endstops before doing AUTO_OFFSET_CRASH_PROTECTION. You can't do this in AUTO_OFFSET_CRASH_PROTECTION itself
    AUTO_OFFSET_CRASH_PROTECTION # detects if endstop is triggered if tap touches it. Prevents crashes if homing failed or similar.

    G91
    G0 Z{(PROBE_OFFSET*(-1)) + auto_offset.max_adjustment * 1.25} # move up by z-offset + max_adjustment value * 1.25
    
    {% for _ in range(SAMPLES) %} # Loop for samples
      AUTO_OFFSET_SAMPLE # do samples
    {% endfor %}

    G91
    G0 Z25 # raise 25mm

    G28 Z # home Z

    AUTO_OFFSET_ADJUSTMENT # apply adjustment
    AUTO_OFFSET_VARIABLES # reset variables

[gcode_macro AUTO_OFFSET_SAMPLE]
description: Sample module of AUTO_OFFSET
gcode:
    {% set auto_offset = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use auto_offset instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> auto_offset.samples

    {% set PROBE_OFFSET = printer.configfile.settings.probe.z_offset %}

    {% if auto_offset.auto_offset_state %} # prevents direct use. This is only a calculation module that can be called via AUTO_OFFSET

      G28 E # home with endstop
      PROBE SAMPLES=3 SAMPLES_TOLERANCE_RETRIES=5 # probe on endstop
      G0 Z{(PROBE_OFFSET*(-1)) + auto_offset.max_adjustment} # move up by z-offset + max_adjustment value

      AUTO_OFFSET_CALCULATION # do calculation

    {% else %}
      { action_raise_error('You cannot run this macro! Use "AUTO_OFFSET" to calibrate your offset.') } # errors if macro is called directly
    {% endif %}

[gcode_macro AUTO_OFFSET_CRASH_PROTECTION]
description: Protection module of AUTO_OFFSET
gcode:
    {% set auto_offset = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use auto_offset instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> auto_offset.samples
    {% set STATE = printer.query_endstops.last_query.z %} # get last query result

    {% if STATE == 0 %} # if not triggered...
      G91
      G0 Z25
      TURN_OFF_HEATERS
      { action_raise_error('CRASH PROTECTION triggered! Printer may homed incorrectly!') } # errors if endstop is not triggered
    {% elif STATE == 1 %} # if triggered
      # do nothing if endstop triggers like expected
    {% else %} # if state is not 0 or 1...
      { action_raise_error('Something went wrong. Unknown query state. Check your macro setup.') } # errors if state is not 0 or 1
    {% endif %}

[gcode_macro AUTO_OFFSET_CALCULATION]
description: Calculate module of AUTO_OFFSET
gcode:
    {% set auto_offset = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use auto_offset instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> auto_offset.samples
    {% set PROBE_RESULT = printer.probe.last_z_result %}
    {% set Z_ENDSTOP_OFFSET = printer.configfile.settings.stepper_z.position_endstop %}
    {% set PROBE_OFFSET = printer.configfile.settings.probe.z_offset %}
    {% set SAMPLE_RESULTS = auto_offset.sample_results %} # get values from variable and set them as SAMPLE_RESULTS

    {% if auto_offset.auto_offset_state %} # prevents direct use. This is only a calculation module that can be called via AUTO_OFFSET

        ### CALCULATION! ###
        {% set SAMPLE_RESULT = ((PROBE_RESULT - (Z_ENDSTOP_OFFSET + PROBE_OFFSET))*(-1)) %} # calculate gcode offset adjustment

        { action_respond_info('Sample result: %.4f' % (SAMPLE_RESULT)) } # show sample result

      {% set SAMPLE_RESULTS = SAMPLE_RESULTS ~ SAMPLE_RESULT | round(4) ~ "," %} # add last sample result. Round result
      SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=sample_results VALUE="'{SAMPLE_RESULTS}'" # add all last samples + new sample. Will be divided by AUTO_OFFSET_ADJUSTMENT. Saved as string. Not the most elegant solution, but works great

    {% else %}
      { action_raise_error('You cannot run this macro! Use "AUTO_OFFSET" to calibrate your offset.') } # errors if macro is called directly
    {% endif %}

[gcode_macro AUTO_OFFSET_ADJUSTMENT]
description: Adjustment module of AUTO_OFFSET
gcode:
    {% set auto_offset = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use auto_offset instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> auto_offset.samples
    {% set plate = printer['gcode_macro ' + auto_offset.plate_name] %} # plate.offset_correction for example will give you the correction value of the active plate (auto_offset.plate_name)

    {% if auto_offset.auto_offset_state %} # prevents direct use. This is only a calculation module that can be called via AUTO_OFFSET

      ### Show all samples ###
      {% set SAMPLE_RESULTS = auto_offset.sample_results[:-1] %} # remove last ,
        { action_respond_info('Samples:\n%s' % (SAMPLE_RESULTS.replace(",", "\n"))) } # show all samples

      ### Calculate delta & show max deviation ###
      {% set SAMPLE_RESULTS_LIST = SAMPLE_RESULTS.split(",") | map('float') | list %} # convert to list
      {% set DELTA_SAMPLE_RESULTS = SAMPLE_RESULTS_LIST | max - SAMPLE_RESULTS_LIST | min %} # calculate deviation
      {% if SAMPLE_RESULTS_LIST | length > 1 %} # only show deviation when more than 2 samples
          { action_respond_info('Deviation: %.4f' % (DELTA_SAMPLE_RESULTS)) } # show deviation
      {% endif %}

      ### Calculate average result & show it ###
      {% set AVERAGE_SAMPLE_RESULT = SAMPLE_RESULTS.split(",") | map('float') | sum / SAMPLE_RESULTS.split(",") | length %}
        { action_respond_info('Average result: %.4f' % (AVERAGE_SAMPLE_RESULT)) } # show average result
        SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=last_average VALUE={AVERAGE_SAMPLE_RESULT}

      { action_respond_info('Selected Plate: %s. Correction value: +%.3f' % (auto_offset.plate_name, plate.offset_correction)) } # show selected plate again

      ### Calculate thermal compensation if enabled. Set it to 0 otherwise ###
      {% if auto_offset.enable_thermal_compensation and auto_offset.extruder_temp != auto_offset.probe_temp %} # if enabled. Disabled if extruder temp = probe temp -> compensation whould be 0
        {% set THERMAL_COMPENSATION = auto_offset.thermal_expansion_factor * (auto_offset.extruder_temp - auto_offset.probe_temp) %} # calculate actual compensation length
          { action_respond_info('Thermal compensation: %.4f' % (THERMAL_COMPENSATION)) } # respond calculated value
      {% else %}
        {% set THERMAL_COMPENSATION = 0 %} # if disabled set to 0
      {% endif %}

      ### Calculate actual adjustment based on the average value & show it ###
      {% set ADJUSTMENT = AVERAGE_SAMPLE_RESULT + plate.offset_correction + THERMAL_COMPENSATION %} # Calculated adjustment + plate specific correction ( + thermal compensation). plate specific correction -> You need some extra distance between nozzle and plate. Value depents on the plate surface type
        { action_respond_info('Adjustment: %.4f' % (ADJUSTMENT)) } # show adjustment result

      ### Protection features ###
      {% if plate.offset_correction < 0 %} # prevent offset corrections below 0
       { action_raise_error('NEGATIVE offset corrections are NOT ALLOWED! A negative value would scrape your bed! Current value: %.1fC' % (plate.offset_correction)) }
      {% endif %}

      {% if ADJUSTMENT > auto_offset.max_adjustment or ADJUSTMENT < -auto_offset.max_adjustment %} # prevents adjustments greater than the max adjustment value
         { action_raise_error('Adjustment is greater than the max adjustment value allows.') }
      {% endif %}

      {% if DELTA_SAMPLE_RESULTS > auto_offset.max_deviation %} # errors if deviation is greater than max allowed deviation
         { action_raise_error('Meassured deviation (%.4f) is greater than allowed deviation (%.4f)' % (DELTA_SAMPLE_RESULTS, auto_offset.max_deviation)) }
      {% endif %}

      ### Apply value with SET_GCODE_OFFSET ###
      SET_GCODE_OFFSET Z={ADJUSTMENT}

    {% else %}
      { action_raise_error('You cannot run this macro! Use "AUTO_OFFSET" to calibrate your offset.') } # errors if macro is called directly
    {% endif %}

[gcode_macro THERMAL_COMPENSATION_CALIBRATION]
description: Calibrate your thermal expansion factor
gcode:
    {% set auto_offset = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use auto_offset instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> auto_offset.samples
    {% set thermal_comp = printer['gcode_macro THERMAL_COMPENSATION_VARIABLES'] %}
    {% set th = printer.toolhead %}

    {% set PROBE_OFFSET = printer.configfile.settings.probe.z_offset %} # current probe offset
    {% set THERMAL_COMP_SAMPLES = params.THERMAL_COMP_SAMPLES|default(thermal_comp.default_thermal_comp_samples)|int %} # params sample amount. Use defined default if not set
    {% set AUTO_OFFSET_SAMPLES = params.AUTO_OFFSET_SAMPLES|default(thermal_comp.default_auto_offset_samples)|int %} # params sample amount. Use defined default if not set

    THERMAL_COMPENSATION_VARIABLES # reset variables

    SET_GCODE_VARIABLE MACRO=THERMAL_COMPENSATION_VARIABLES VARIABLE=thermal_compensation_state VALUE=True # set state to true. This is a feature that prevents running other AUTO_OFFSET macros directly. Like AUTO_OFFSET_ADJUSTMENT

    {% if printer.toolhead.homed_axes != "xyz" %} #Smarthome. Homes if not homed
      G28
    {% endif %}

    G90
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 10} Z30 F30000 # park at rear center
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={auto_offset.probe_temp} # heat up to probe temp
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={auto_offset.probe_temp} # wait for temperature
    {auto_offset.nozzle_cleaning_macro} # Use nozzle cleaning macro
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 10} Z30 F30000 # park at rear center

    SET_GCODE_OFFSET Z=0 # remove any correction before calibration
    
    {% for _ in range(THERMAL_COMP_SAMPLES) %} # Loop for samples
      THERMAL_COMPENSATION_SAMPLE # do samples
    {% endfor %}

    G91
    G0 Z25 # raise 25mm

    AUTO_OFFSET SAMPLES={AUTO_OFFSET_SAMPLES} EXTRUDER_TEMP={auto_offset.probe_temp} # AUTO_OFFSET samples. Set probe temp as extruder temp -> results in 0 compensation

    G28 Z # home Z

    THERMAL_COMPENSATION_CALCULATION # calculate thermal factor
    THERMAL_COMPENSATION_VARIABLES # reset variables

[gcode_macro THERMAL_COMPENSATION_SAMPLE]
description: Sample module of THERMAL_COMPENSATION_CALIBRATION
gcode:
    {% set auto_offset = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use auto_offset instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> auto_offset.samples
    {% set thermal_comp = printer['gcode_macro THERMAL_COMPENSATION_VARIABLES'] %}

    {% set PROBE_OFFSET = printer.configfile.settings.probe.z_offset %} # current probe offset
    {% set PROBE_RETRACT = printer.configfile.settings.probe.sample_retract_dist %} # probe retract distance
    {% set PROBE_LIFT_SPEED = printer.configfile.settings.probe.lift_speed %} # probe lift speed
    {% set th = printer.toolhead %}

    {% if thermal_comp.thermal_compensation_state %} # prevents direct use. This is only a calculation module that can be called via THERMAL_COMPENSATION_CALIBRATION
      ### Endstop ###
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={auto_offset.probe_temp} # heat to probe temp
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={auto_offset.probe_temp - 3} # wait for probe temp - 3
      G90
      G0 X{printer["gcode_macro POSITION_Z_ENDSTOP"].endstop_x} Y{printer["gcode_macro POSITION_Z_ENDSTOP"].endstop_y} F30000 # move to endstop position
      PROBE SAMPLES=1 SAMPLES_TOLERANCE_RETRIES=5 # do 2 probe samples on endstop 
      G4 P1000 # wait a second
      QUERY_ENDSTOPS # must query endstops before doing AUTO_OFFSET_CRASH_PROTECTION. You can't do this in AUTO_OFFSET_CRASH_PROTECTION itself
      AUTO_OFFSET_CRASH_PROTECTION # detects if endstop is triggered if tap touches it. Prevents crashes if homing failed or similar.
      G91
      G0 Z{(PROBE_OFFSET*(-1)) + auto_offset.max_adjustment} F{PROBE_LIFT_SPEED*60} # lift probe by max_adjustment defined in AUTO_OFFSET
      G0 Z30 # lift nozzle 30mm (relative position)
      G90
      G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 10} F30000 # park at rear center
      M109 S{thermal_comp.calibration_temp} # heat up to calibration temp
      G4 P10000 # wait 10 sec to stabilize
      G0 X{printer["gcode_macro POSITION_Z_ENDSTOP"].endstop_x} Y{printer["gcode_macro POSITION_Z_ENDSTOP"].endstop_y} F30000 # move to endstop position
      G91
      G0 Z-30 # move down 30mm. We should be arround max_adjustment above the endstop, which greatly reduces time needed for nozzle homing
      G28 E # home with endstop
      G91
      G0 Z10 # Lift up 10mm

      ### Probe ###
      G90
      G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 10} Z30 F30000 # park at rear center
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={auto_offset.probe_temp} # cool down to probe temp
      M106 S255 # turn on fans for faster cooling
      TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={auto_offset.probe_temp + 5} # wait until temp is 5°C above target
      M106 S0 # turn off fans at target + 5°C to prevent dropping below target
      M109 S{auto_offset.probe_temp} # wait for temperature to stabilize
      G4 P15000 # wait 15 sec to stabilize
      G0 X{printer["gcode_macro POSITION_Z_ENDSTOP"].endstop_x} Y{printer["gcode_macro POSITION_Z_ENDSTOP"].endstop_y} Z30 F30000 # move to endstop position

      PROBE SAMPLES=5 SAMPLES_TOLERANCE_RETRIES=5 # some probes to squish away any material before doing measurements
      G91
      G0 Z{PROBE_RETRACT - PROBE_OFFSET} F{PROBE_LIFT_SPEED*60} # move probe up by retract distance

      PROBE SAMPLES=3 SAMPLES_TOLERANCE_RETRIES=5 # final probe samples on endstop
      G91
      G0 Z{PROBE_RETRACT - PROBE_OFFSET} F{PROBE_LIFT_SPEED*60} # move probe up by retract distance

      THERMAL_COMPENSATION_SAMPLE_CALCULATION # do calculation

    {% else %}
      { action_raise_error('You cannot run this macro! Use "THERMAL_COMPENSATION_CALIBRATION" to calibrate your thermal expansion value.') } # errors if macro is called directly
    {% endif %}

[gcode_macro THERMAL_COMPENSATION_SAMPLE_CALCULATION]
description: Calculate module of THERMAL_COMPENSATION_CALIBRATION
gcode:
    {% set thermal_comp = printer['gcode_macro THERMAL_COMPENSATION_VARIABLES'] %}
    {% set auto_offset = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use auto_offset instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> auto_offset.samples
    {% set PROBE_RESULT = printer.probe.last_z_result %}
    {% set Z_ENDSTOP_OFFSET = printer.configfile.settings.stepper_z.position_endstop %}
    {% set PROBE_OFFSET = printer.configfile.settings.probe.z_offset %}
    {% set SAMPLE_RESULTS = thermal_comp.sample_results %} # get values from variable and set them as SAMPLE_RESULTS

    {% if thermal_comp.thermal_compensation_state %} # prevents direct use. This is only a calculation module that can be called via THERMAL_COMPENSATION_CALIBRATION

        ### CALCULATION! ###
        {% set SAMPLE_RESULT = ((PROBE_RESULT - (Z_ENDSTOP_OFFSET + PROBE_OFFSET))*(-1)) %} # calculate gcode offset adjustment

        { action_respond_info('Sample result (%.0f/%.0f): %.4f' % (auto_offset.probe_temp, thermal_comp.calibration_temp, SAMPLE_RESULT)) } # show sample result

      {% set SAMPLE_RESULTS = SAMPLE_RESULTS ~ SAMPLE_RESULT | round(4) ~ "," %} # add last sample result. Round result
      SET_GCODE_VARIABLE MACRO=THERMAL_COMPENSATION_VARIABLES VARIABLE=sample_results VALUE="'{SAMPLE_RESULTS}'" # add all last samples + new sample. Will be divided by AUTO_OFFSET_ADJUSTMENT. Saved as string. Not the most elegant solution, but works great

    {% else %}
      { action_raise_error('You cannot run this macro! Use "THERMAL_COMPENSATION_CALIBRATION" to calibrate your thermal expansion value.') } # errors if macro is called directly
    {% endif %}

[gcode_macro THERMAL_COMPENSATION_CALCULATION]
description: Adjustment module of THERMAL_COMPENSATION_CALIBRATION
gcode:
    {% set thermal_comp = printer['gcode_macro THERMAL_COMPENSATION_VARIABLES'] %}
    {% set auto_offset = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use auto_offset instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> auto_offset.samples

    {% if thermal_comp.thermal_compensation_state %} # prevents direct use. This is only a calculation module that can be called via THERMAL_COMPENSATION_CALIBRATION

      ### Show all samples ###
      {% set SAMPLE_RESULTS = thermal_comp.sample_results[:-1] %} # remove last ,
        { action_respond_info('Samples (%.0f°C/%.0f°C):\n%s' % (auto_offset.probe_temp, thermal_comp.calibration_temp, SAMPLE_RESULTS.replace(",", "\n"))) } # show all samples

      ### Calculate delta & show max deviation ###
      {% set SAMPLE_RESULTS_LIST = SAMPLE_RESULTS.split(",") | map('float') | list %} # convert to list
      {% set DELTA_SAMPLE_RESULTS = SAMPLE_RESULTS_LIST | max - SAMPLE_RESULTS_LIST | min %} # calculate deviation
      {% if SAMPLE_RESULTS_LIST | length > 1 %} # only show deviation when more than 2 samples
          { action_respond_info('Deviation (%.0f°C/%.0f°C): %.4f' % (auto_offset.probe_temp, thermal_comp.calibration_temp, DELTA_SAMPLE_RESULTS)) } # show deviation
      {% endif %}

      ### Calculate average result & show it ###
      {% set AVERAGE_SAMPLE_RESULT = SAMPLE_RESULTS.split(",") | map('float') | sum / SAMPLE_RESULTS.split(",") | length %}
        { action_respond_info('Average result (%.0f°C/%.0f°C): %.4f' % (auto_offset.probe_temp, thermal_comp.calibration_temp, AVERAGE_SAMPLE_RESULT)) } # show average result

      ### Protection features ###
      {% if DELTA_SAMPLE_RESULTS > auto_offset.max_deviation %} # errors if deviation is greater than max allowed deviation
         { action_raise_error('Meassured deviation (%.4f) is greater than allowed deviation (%.4f)' % (DELTA_SAMPLE_RESULTS, thermal_comp.max_deviation)) }
      {% endif %}

      ### Calculate delta between probe temp and calibration temp. Calculate tbe thermal expansion factor & show it
      {% set THERMAL_EXPANSION_FACTOR = (AVERAGE_SAMPLE_RESULT - auto_offset.last_average) / (thermal_comp.calibration_temp - auto_offset.probe_temp) %}
      { action_respond_info('Calculation: ((%.4fmm) - (%.4fmm)) / (%.0f°C - %.0f°C)' % (AVERAGE_SAMPLE_RESULT, auto_offset.last_average, thermal_comp.calibration_temp, auto_offset.probe_temp)) } # shows calculation. Useful for debugging
      { action_respond_info('YOUR HOTEND SPECIFIC THERMAL EXPANSION FACTOR: %.15fmm/°C\nPlease set this value in your Auto_Offset.cfg' % (THERMAL_EXPANSION_FACTOR)) } # show thermal factor
      M117 FACTOR: {THERMAL_EXPANSION_FACTOR}mm/°C

    {% else %}
      { action_raise_error('You cannot run this macro! Use "THERMAL_COMPENSATION_CALIBRATION" to calibrate your thermal expansion value.') } # errors if macro is called directly
    {% endif %}
#  _  _                 _               
# | || |  ___   _ __   (_)  _ _    __ _ 
# | __ | / _ \ | '  \  | | | ' \  / _` |
# |_||_| \___/ |_|_|_| |_| |_||_| \__, |
#                                 |___/ 
[homing_override]
axes: xyz
gcode:
  {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params and 'E' not in params and 'P' not in params %}

  {% if 'E' in params %}
    HOME_ENDSTOP
  {% endif %}

  {% if 'P' in params %}
    HOME_PROBE
  {% endif %}

  {% if home_all or 'X' in params %}
    HOME_X
  {% endif %}
  
  {% if home_all or 'Y' in params %}
    HOME_Y
  {% endif %}
  
  {% if home_all or 'Z' in params %}
    HOME_PROBE
  {% endif %}

[gcode_macro HOME_X]
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 X
    # Move away
    G91
    G0 X-10 F1200
    
    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro HOME_Y]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 Y
    # Move away
    G91
    G0 Y-10 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro HOME_PROBE]
gcode:
    {% set PROBE_OFFSET = printer.configfile.settings.probe.z_offset %}
    {% set PROBE_RETRACT = printer.configfile.settings.probe.sample_retract_dist %}
    {% set PROBE_LIFT_SPEED = printer.configfile.settings.probe.lift_speed %}
    {% set PROBE_SPEED = printer.configfile.settings.probe.speed %}
    {% set th = printer.toolhead %}

    G90
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} F30000 # move to bed center
    SET_KINEMATIC_POSITION Z={th.axis_maximum.z} # set Z to max height in order to get max possible travel distance without error
    PROBE SAMPLES=1 PROBE_SPEED={PROBE_SPEED*1.5} # Use probe speed * 1.5
    G91
    G0 Z{PROBE_RETRACT - PROBE_OFFSET} F{PROBE_LIFT_SPEED*60} # lift probe for second pass
    PROBE SAMPLES=1 PROBE_SPEED={PROBE_SPEED/2} # second pass is probe speed / 2
    SET_KINEMATIC_POSITION Z={PROBE_OFFSET} # Force set position at probe trigger point. Use probe offset to get Z0 position 
    G91
    G0 Z10 # lift up 10mm

[gcode_macro HOME_ENDSTOP]
gcode:
    {% set auto_offset = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use auto_offset instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> auto_offset.samples
    {% set thermal_comp = printer['gcode_macro THERMAL_COMPENSATION_VARIABLES'] %}
    {% set HOME_TEMP = 150 %} # Home temp. A minimum temperature ist required to squish away any material ooze
    {% set ACTUAL_TEMP = printer.extruder.temperature %} # current extruder temp
    {% set TARGET_TEMP = printer.extruder.target %} # extruder target temp
    {% set MIN_TEMP = HOME_TEMP - 5 %} # minimum allowed homing temp. Home temp - 5°C
    {% set th = printer.toolhead %}

    {% if printer["gcode_macro POSITION_Z_ENDSTOP"].endstop_x < th.axis_minimum.x or printer["gcode_macro POSITION_Z_ENDSTOP"].endstop_y < th.axis_minimum.y or printer["gcode_macro POSITION_Z_ENDSTOP"].endstop_x > th.axis_maximum.x or printer["gcode_macro POSITION_Z_ENDSTOP"].endstop_y > th.axis_maximum.y %}
    ### Does not work ATM ###
#      { action_raise_error('Set your endstop position! Or you may crash your printer') } # errors if endstop position is out of movement
#    {% elif auto_offset.auto_offset_state %} # errors if used directly
#      { action_raise_error('Only AUTO_OFFSET or THERMAL_COMPENSATION can use HOME_ENDSTOP') } # only allows AUTO_OFFSET or THERMAL_COMPENSATION to use this
#    {% elif thermal_comp.thermal_compensation_state %} # errors if used directly
#      { action_raise_error('Only AUTO_OFFSET or THERMAL_COMPENSATION can use HOME_ENDSTOP') } # only allows AUTO_OFFSET or THERMAL_COMPENSATION to use this
    {% endif %}

    {% if TARGET_TEMP < HOME_TEMP %} # increase temp if target too low
      { action_respond_info('Extruder temperature target of %.1fC is too low, increasing to %.1fC' % (TARGET_TEMP, HOME_TEMP)) }
      M109 S{HOME_TEMP}

     {% else %}
        {% if ACTUAL_TEMP < MIN_TEMP %} #increase temp if actual temp too low
            { action_respond_info('Extruder temperature %.1fC is still too low, waiting until above %.1fC' % (ACTUAL_TEMP, MIN_TEMP)) }
            TEMPERATURE_WAIT SENSOR=extruder MINIMUM={MIN_TEMP}
        {% endif %}
     {% endif %}
    G90
    G0 X{printer["gcode_macro POSITION_Z_ENDSTOP"].endstop_x} Y{printer["gcode_macro POSITION_Z_ENDSTOP"].endstop_y} F30000 # move to endstop position
    G28 Z # home Z
    G91
    G0 Z1 # move up 1mm. I don't recommend changing this value

#####################################################################
# 	Misc
#####################################################################
[force_move] # force_move is required for HOME_PROBE
enable_force_move: True
