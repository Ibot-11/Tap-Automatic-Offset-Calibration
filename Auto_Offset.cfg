# Auto-Offset-Calibration by Ibot_11
# Github: https://github.com/Ibot-11/Tap-Automatic-Offset-Calibration
# Licensed under AGPL-3.0 license
# Version 2.1.1

#  ___   _          _              
# | _ \ | |  __ _  | |_   ___   ___
# |  _/ | | / _` | |  _| / -_) (_-<
# |_|   |_| \__,_|  \__| \___| /__/
#                                  
[gcode_macro TEXTURED_PLATE]
description: Offset correction for textured plates
variable_offset_correction : 0.03 # set your value here
variable_plate_name: "TEXTURED_PLATE" # set your macro name here! Must be the same!
gcode:
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=plate_name VALUE="'{plate_name}'"
    AUTO_OFFSET_INFO TEXT='{'Correction value for %s loaded. Correction: +%.3f'|format(plate_name, offset_correction)|string}'

[gcode_macro SMOOTH_PLATE]
description: Offset correction for smooth plates
variable_offset_correction : 0.07 # set your value here
variable_plate_name: "SMOOTH_PLATE" # set your macro name here! Must be the same!
gcode:
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=plate_name VALUE="'{plate_name}'"
    AUTO_OFFSET_INFO TEXT='{'Correction value for %s loaded. Correction: +%.3f'|format(plate_name, offset_correction)|string}'


#  ___             _        _                
# | __|  _ _    __| |  ___ | |_   ___   _ __ 
# | _|  | ' \  / _` | (_-< |  _| / _ \ | '_ \
# |___| |_||_| \__,_| /__/  \__| \___/ | .__/
#                                      |_|   
[gcode_macro POSITION_Z_ENDSTOP]
description: Dummy macro to set the endstop position
variable_endstop_x : -999 # set your endstop X position
variable_endstop_y : -999 # set your endstop y position
gcode:


#    _            _              ___     __    __              _   
#   /_\    _  _  | |_   ___     / _ \   / _|  / _|  ___  ___  | |_ 
#  / _ \  | || | |  _| / _ \   | (_) | |  _| |  _| (_-< / -_) |  _|
# /_/ \_\  \_,_|  \__| \___/    \___/  |_|   |_|   /__/ \___|  \__|
#                                                                                                                                    
[gcode_macro AUTO_OFFSET_VARIABLES]
description: Just saves variables and resets them
########################################
### AUTO OFFSET CALIBRATION SETTINGS ###
########################################
### DYNAMIC PROBE TEMPERATURE ###
variable_dynamic_probe_temp_min: 150 # this feature will set the probe temperature depending on the printing temperature. Probing with higher temperatures for PC etc. can improve deviation, but with higher temperatures PLA tends to ooze
variable_dynamic_probe_temp_max: 180 # don't use values above 180Â°C on PEI. Otherwise your sheet may get damaged. To disable this feature just set min and max to the same value
variable_dynamic_probe_temp_threshold: 240 # threshold for for probing temperature: Below -> temp_min; Above -> temp_max; = threshold -> temp_max
### CALIBRATION PROCEDURE ###
variable_default_samples: 3 # sample amount for calibration
variable_retries: 5 # allowed retries if crash protection triggers
variable_max_adjustment : 0.5 # Define max adjustment | 0.5 is default
variable_max_deviation: 0.008 # max allowed devition between samples. Errors if greater
variable_crash_protection_retry: True # If crash protection triggers there will be a retry...
variable_crash_protection_retry_nozzle_cleaning: 3 # Cleaning macros before doing the second try
### DEFAULT MACROS / SHEET ###
variable_plate_name: "TEXTURED_PLATE" # Default plate name (macro name)
variable_nozzle_cleaning_macro: "CLEAN_NOZZLE" # Set your macro for nozzle cleaning

##########################
### DO NOT EDIT BELOW! ###
##########################
variable_sample_results: "" # Do not edit
variable_auto_offset_state : False # Used for a safety feature. Do not edit!
variable_last_average: 0 # Do not edit!
variable_extruder_temp: 0 # Do not edit!
variable_probe_temp: 0 # Do not edit!
variable_samples: 0 # Do not edit!
gcode:
    ### Reset all variables that changes while the macro runs ###
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=sample_results VALUE="''" 
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=auto_offset_state VALUE=False
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=extruder_temp VALUE=0



############################################################################################################################################################################################################################################
#  __  __                              
# |  \/  |  __ _   __   _ _   ___   ___
# | |\/| | / _` | / _| | '_| / _ \ (_-<
# |_|  |_| \__,_| \__| |_|   \___/ /__/
#
[gcode_macro AUTO_OFFSET_START]
description: Start macro including Heating, QUAD_GANTRY_LEVEL, AUTO_OFFSET and BED_MESH_LEVEL
gcode:
    {% set auto_offset = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use auto_offset instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> auto_offset.samples
    {% set th = printer.toolhead %}

    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(-1)|float %} # required. -1 is a dummy value. Used to error if undefined
    {% set BED_TEMP = params.BED_TEMP|default(-1)|float %} # required. -1 is a dummy value. Used to error if undefined

    {% if EXTRUDER_TEMP == -1 %}
      AUTO_OFFSET_ERROR_LIFT TEXT={'In order to run this AUTO_OFFSET_START you have to specify EXTRUDER_TEMP and BED_TEMP.'|string} # errors if runned without extruder or bed temperature
    {% endif %}

    {% if BED_TEMP == -1 %}
      AUTO_OFFSET_ERROR_LIFT TEXT={'In order to run this AUTO_OFFSET_START you have to specify EXTRUDER_TEMP and BED_TEMP.'|string} # errors if runned without extruder or bed temperature
    {% endif %}

    G28 # home printer

    {% if EXTRUDER_TEMP < auto_offset.dynamic_probe_temp_threshold %} # Use dynamic probe temperature
      {% set PROBE_TEMP = auto_offset.dynamic_probe_temp_min|default(-1)|float %}
    {% elif EXTRUDER_TEMP >= auto_offset.dynamic_probe_temp_threshold %}
      {% set PROBE_TEMP = auto_offset.dynamic_probe_temp_max|default(-1)|float %}
    {% endif %}

    G90
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 10} Z30 F30000 # park at rear center

    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={PROBE_TEMP}
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP} 
    M109 S{PROBE_TEMP}               ; wait for extruder temperature
    M190 S{BED_TEMP}                    ; wait for bed temprature

    {auto_offset.nozzle_cleaning_macro} # Use nozzle cleaning macro

    QUAD_GANTRY_LEVEL

    G28 Z

    AUTO_OFFSET EXTRUDER_TEMP={EXTRUDER_TEMP}

    BED_MESH_CALIBRATE

    G90
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 10} Z30 F30000

    M109 S{EXTRUDER_TEMP}

    {auto_offset.nozzle_cleaning_macro} # Use nozzle cleaning macro

[gcode_macro AUTO_OFFSET]
description: Calibrate your first layer
gcode:
    {% set auto_offset = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use auto_offset instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> auto_offset.samples
    {% set plate = printer['gcode_macro ' + auto_offset.plate_name] %} # plate.offset_correction for example will give you the correction value of the active plate (auto_offset.plate_name)
    {% set th = printer.toolhead %}

    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(-1)|float %} # required for dynamic probe temp. -1 is a dummy value. Used to error if undefined
    {% set SAMPLES = params.SAMPLES|default(auto_offset.default_samples)|int %} # params sample amount. Use defined default if not set
    {% set PROBE_OFFSET = printer.configfile.settings.probe.z_offset %} # current probe offset

    {% if EXTRUDER_TEMP == -1 %}
      AUTO_OFFSET_ERROR_LIFT TEXT={'In order to run this macro you have to specify EXTRUDER_TEMP.'|string} # errors if runned without extruder temperature
    {% endif %}

    AUTO_OFFSET_VARIABLES # reset variables

    {% if EXTRUDER_TEMP < auto_offset.dynamic_probe_temp_threshold %} # Use dynamic probe temperature
      {% set PROBE_TEMP = auto_offset.dynamic_probe_temp_min|default(-1)|float %}
    {% elif EXTRUDER_TEMP >= auto_offset.dynamic_probe_temp_threshold %}
      {% set PROBE_TEMP = auto_offset.dynamic_probe_temp_max|default(-1)|float %}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=auto_offset_state VALUE=True # set state to true. This is a feature that prevents running other AUTO_OFFSET macros directly. Like AUTO_OFFSET_ADJUSTMENT
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=extruder_temp VALUE={EXTRUDER_TEMP}
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=probe_temp VALUE={PROBE_TEMP}
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=samples VALUE={SAMPLES}

    AUTO_OFFSET_INFO TEXT='{'Selected Plate: %s. Correction value: +%.3f'|format(auto_offset.plate_name, plate.offset_correction)|string}' # show selected plate

    SET_GCODE_OFFSET Z=0 # remove any correction before calibration

    {% if printer.toolhead.homed_axes != "xyz" %} #Smarthome. Homes if not homed
        G28
    {% endif %}

    {% if printer.extruder.temperature < PROBE_TEMP - 3 or printer.extruder.target != PROBE_TEMP or printer.extruder.temperature > PROBE_TEMP + 3 %} # heat nozzle if not at probing temp already or target is below probe temp
      G90
      G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 10} Z30 F30000 # park at rear center
      M109 S{PROBE_TEMP} # heat up to probe temp
      G4 P10000 # wait 10 sec to stabilize
    {% endif %}

    AUTO_OFFSET_CRASH_PROTECTION

    G91
    G0 Z{(PROBE_OFFSET*(-1)) + auto_offset.max_adjustment * 2} # move up by z-offset + max_adjustment value * 1.25

    {% for _ in range(SAMPLES) %} # Loop for samples
      AUTO_OFFSET_SAMPLE # do samples
    {% endfor %}

    G91
    G0 Z10 # raise 25mm

    G28 Z # home Z

    AUTO_OFFSET_ADJUSTMENT # apply adjustment
    AUTO_OFFSET_VARIABLES # reset variables

[gcode_macro AUTO_OFFSET_CRASH_PROTECTION]
description: Protection module of AUTO_OFFSET
gcode:
    {% set auto_offset = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use auto_offset instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> auto_offset.samples

    {% if auto_offset.auto_offset_state == False %} # prevents direct use. This is only a protection module that can be called via AUTO_OFFSET
      AUTO_OFFSET_ERROR_LIFT TEXT={'You cannot run this macro! Use "AUTO_OFFSET" to calibrate your offset.'|string} # errors if macro is called directly
    {% endif %}

    {auto_offset.nozzle_cleaning_macro} # Use nozzle cleaning macro
    G90
    G0 X{printer["gcode_macro POSITION_Z_ENDSTOP"].endstop_x} Y{printer["gcode_macro POSITION_Z_ENDSTOP"].endstop_y} Z10 F30000 # move to endstop position
    PROBE SAMPLES=5 SAMPLES_TOLERANCE_RETRIES=10 # some probes to squish away any material before doing measurements

    G4 P1000 # wait a second
    QUERY_ENDSTOPS # must query endstops before doing AUTO_OFFSET_CRASH_PROTECTION. You can't do this in AUTO_OFFSET_CRASH_PROTECTION itself
    AUTO_OFFSET_CRASH_PROTECTION_CHECK # detects if endstop is triggered if tap touches it. Prevents crashes if homing failed or similar.

[gcode_macro AUTO_OFFSET_CRASH_PROTECTION_CHECK]
description: Protection module of AUTO_OFFSET
gcode:
    {% set auto_offset = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use auto_offset instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> auto_offset.samples
    {% set STATE = printer.query_endstops.last_query.z %} # get last query result

    {% if auto_offset.auto_offset_state == False %} # prevents direct use. This is only a protection module that can be called via AUTO_OFFSET
      AUTO_OFFSET_ERROR_LIFT TEXT={'You cannot run this macro! Use "AUTO_OFFSET" to calibrate your offset.'|string} # errors if macro is called directly
    {% endif %}

    {% if STATE == 0 and auto_offset.crash_protection_retry == False %} # if not triggered and retry is disabled...
      AUTO_OFFSET_ERROR_LIFT TEXT='{'CRASH PROTECTION triggered! Printer may homed incorrectly!'|string}' # errors if endstop is not triggered
    {% elif STATE == 0 and auto_offset.crash_protection_retry == True %} # if not triggered and retry is enabled...
      AUTO_OFFSET_ERROR_INFO TEXT='{'CRASH PROTECTION triggered! Retrying...'|string}' # info if endstop is not triggered
      AUTO_OFFSET_CRASH_PROTECTION_RETRY # retry with multiple nozzle cleaning
    {% elif STATE == 1 %} # if triggered
      # do nothing if endstop triggers like expected
    {% else %} # if state is not 0 or 1...
      AUTO_OFFSET_ERROR_LIFT TEXT='{'Something went wrong. Unknown query state. Check your macro setup.'|string}' # errors if state is not 0 or 1
    {% endif %}

[gcode_macro AUTO_OFFSET_CRASH_PROTECTION_RETRY]
description: Protection module of AUTO_OFFSET
gcode:
    {% set auto_offset = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use auto_offset instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> auto_offset.samples

    {% if auto_offset.auto_offset_state == False %} # prevents direct use. This is only a protection module that can be called via AUTO_OFFSET
      AUTO_OFFSET_ERROR_LIFT TEXT={'You cannot run this macro! Use "AUTO_OFFSET" to calibrate your offset.'|string} # errors if macro is called directly
    {% endif %}

    {% for _ in range(auto_offset.crash_protection_retry_nozzle_cleaning) %} # Loop for nozzle cleaning
      {auto_offset.nozzle_cleaning_macro} # Use nozzle cleaning macro
    {% endfor %}

    G90
    G0 X{printer["gcode_macro POSITION_Z_ENDSTOP"].endstop_x} Y{printer["gcode_macro POSITION_Z_ENDSTOP"].endstop_y} Z10 F30000 # move to endstop position
    PROBE SAMPLES=5 SAMPLES_TOLERANCE_RETRIES=10 # some probes to squish away any material before doing measurements

    G4 P1000 # wait a second
    QUERY_ENDSTOPS # must query endstops before doing AUTO_OFFSET_CRASH_PROTECTION. You can't do this in AUTO_OFFSET_CRASH_PROTECTION_RETRY itself
    AUTO_OFFSET_CRASH_PROTECTION_CHECK_RETRY # detects if endstop is triggered if tap touches it. Prevents crashes if homing failed or similar.

[gcode_macro AUTO_OFFSET_CRASH_PROTECTION_CHECK_RETRY]
description: Protection module of AUTO_OFFSET
gcode:
    {% set auto_offset = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use auto_offset instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> auto_offset.samples
    {% set STATE = printer.query_endstops.last_query.z %} # get last query result

    {% if auto_offset.auto_offset_state == False %} # prevents direct use. This is only a protection module that can be called via AUTO_OFFSET
      AUTO_OFFSET_ERROR_LIFT TEXT={'You cannot run this macro! Use "AUTO_OFFSET" to calibrate your offset.'|string} # errors if macro is called directly
    {% endif %}

    {% if STATE == 0 %} # if still not triggered...
      AUTO_OFFSET_ERROR_LIFT TEXT='{'CRASH PROTECTION triggered! Printer may homed incorrectly!'|string}' # errors if endstop is not triggered
    {% elif STATE == 1 %} # if triggered
      # do nothing if endstop triggers like expected
    {% else %} # if state is not 0 or 1...
      AUTO_OFFSET_ERROR_LIFT TEXT='{'Something went wrong. Unknown query state. Check your macro setup.'|string}' # errors if state is not 0 or 1
    {% endif %}

[gcode_macro AUTO_OFFSET_SAMPLE]
description: Sample module of AUTO_OFFSET
gcode:
    {% set auto_offset = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use auto_offset instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> auto_offset.samples
    {% set PROBE_OFFSET = printer.configfile.settings.probe.z_offset %}

    {% if auto_offset.auto_offset_state == False %} # prevents direct use. This is only a sample module that can be called via AUTO_OFFSET
      AUTO_OFFSET_ERROR_LIFT TEXT={'You cannot run this macro! Use "AUTO_OFFSET" to calibrate your offset.'|string} # errors if macro is called directly
    {% endif %}

    G28 E # home with endstop
    PROBE SAMPLES=3 SAMPLES_TOLERANCE_RETRIES=5 # probe on endstop
    G0 Z{(PROBE_OFFSET*(-1)) + auto_offset.max_adjustment * 1.5} # move up by z-offset + max_adjustment value

    AUTO_OFFSET_CALCULATION # do calculation

[gcode_macro AUTO_OFFSET_CALCULATION]
description: Calculate module of AUTO_OFFSET
gcode:
    {% set auto_offset = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use auto_offset instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> auto_offset.samples
    {% set PROBE_RESULT = printer.probe.last_z_result %}
    {% set Z_ENDSTOP_OFFSET = printer.configfile.settings.stepper_z.position_endstop %}
    {% set PROBE_OFFSET = printer.configfile.settings.probe.z_offset %}
    {% set SAMPLE_RESULTS = auto_offset.sample_results %} # get values from variable and set them as SAMPLE_RESULTS

    {% if auto_offset.auto_offset_state == False %} # prevents direct use. This is only a calculation module that can be called via AUTO_OFFSET
      AUTO_OFFSET_ERROR_LIFT TEXT={'You cannot run this macro! Use "AUTO_OFFSET" to calibrate your offset.'|string} # errors if macro is called directly
    {% endif %}

    ### CALCULATION! ###
    {% set SAMPLE_RESULT = ((PROBE_RESULT - (Z_ENDSTOP_OFFSET + PROBE_OFFSET))*(-1)) %} # calculate gcode offset adjustment

    AUTO_OFFSET_INFO TEXT='{'Sample result: %.4f'|format(SAMPLE_RESULT)|string}' # show sample result

    {% set SAMPLE_RESULTS = SAMPLE_RESULTS ~ SAMPLE_RESULT | round(4) ~ "," %} # add last sample result. Round result
    SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=sample_results VALUE="'{SAMPLE_RESULTS}'" # add all last samples + new sample. Will be divided by AUTO_OFFSET_ADJUSTMENT. Saved as string. Not the most elegant solution, but works great

[gcode_macro AUTO_OFFSET_ADJUSTMENT]
description: Adjustment module of AUTO_OFFSET
gcode:
    {% set auto_offset = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use auto_offset instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> auto_offset.samples
    {% set plate = printer['gcode_macro ' + auto_offset.plate_name] %} # plate.offset_correction for example will give you the correction value of the active plate (auto_offset.plate_name)

    {% if auto_offset.auto_offset_state == False %} # prevents direct use. This is only a adjustment module that can be called via AUTO_OFFSET
      AUTO_OFFSET_ERROR_LIFT TEXT={'You cannot run this macro! Use "AUTO_OFFSET" to calibrate your offset.'|string} # errors if macro is called directly
    {% endif %}

    ### Show all samples ###
    {% set SAMPLE_RESULTS = auto_offset.sample_results[:-1] %} # remove last ,
      { action_respond_info('Samples:\n%s' % (SAMPLE_RESULTS.replace(",", "\n"))) } # show all samples

    ### Calculate delta & show max deviation ###
    {% set SAMPLE_RESULTS_LIST = SAMPLE_RESULTS.split(",") | map('float') | list %} # convert to list
    {% set DELTA_SAMPLE_RESULTS = SAMPLE_RESULTS_LIST | max - SAMPLE_RESULTS_LIST | min %} # calculate deviation
    {% if SAMPLE_RESULTS_LIST | length > 1 %} # only show deviation when more than 2 samples
        AUTO_OFFSET_INFO TEXT='{'Deviation: %.4f'|format(DELTA_SAMPLE_RESULTS)|string}' # show deviation
    {% endif %}

    ### Calculate average result & show it ###
    {% set AVERAGE_SAMPLE_RESULT = SAMPLE_RESULTS.split(",") | map('float') | sum / SAMPLE_RESULTS.split(",") | length %}
      AUTO_OFFSET_INFO TEXT='{'Average result: %.4f'|format(AVERAGE_SAMPLE_RESULT)|string}' # show average result
      SET_GCODE_VARIABLE MACRO=AUTO_OFFSET_VARIABLES VARIABLE=last_average VALUE={AVERAGE_SAMPLE_RESULT}

    AUTO_OFFSET_INFO TEXT='{'Selected Plate: %s. Correction value: +%.3f'|format(auto_offset.plate_name, plate.offset_correction)|string}' # show selected plate again

    ### Calculate actual adjustment based on the average value & show it ###
    {% set ADJUSTMENT = AVERAGE_SAMPLE_RESULT + plate.offset_correction %} # Calculated adjustment + plate specific correction. plate specific correction -> You need some extra distance between nozzle and plate. Value depents on the plate surface type
      AUTO_OFFSET_INFO TEXT='{'Adjustment: %.4f'|format(ADJUSTMENT)|string}' # show adjustment result

    ### Protection features ###
    {% if plate.offset_correction < 0 %} # prevent offset corrections below 0
      AUTO_OFFSET_ERROR_LIFT TEXT='{'NEGATIVE offset corrections are NOT ALLOWED! A negative value would scrape your bed! Current value: %.1fC'|format(plate.offset_correction)|string}'
    {% endif %}

    {% if ADJUSTMENT > auto_offset.max_adjustment or ADJUSTMENT < -auto_offset.max_adjustment %} # prevents adjustments greater than the max adjustment value
      AUTO_OFFSET_ERROR_LIFT TEXT='{'Adjustment is greater than the max adjustment value allows.'|string}'
    {% endif %}

    {% if DELTA_SAMPLE_RESULTS > auto_offset.max_deviation %} # errors if deviation is greater than max allowed deviation
      AUTO_OFFSET_ERROR_LIFT TEXT='{'Meassured deviation (%.4f) is greater than allowed deviation (%.4f)'|format(DELTA_SAMPLE_RESULTS, auto_offset.max_deviation)|string}'
    {% endif %}

    ### Apply value with SET_GCODE_OFFSET ###
    SET_GCODE_OFFSET Z={ADJUSTMENT}



#  _  _                 _                   __         ___               _      _               
# | || |  ___   _ __   (_)  _ _    __ _    / _|___    | _ \  _ _   ___  | |__  (_)  _ _    __ _ 
# | __ | / _ \ | '  \  | | | ' \  / _` |   > _|_ _|   |  _/ | '_| / _ \ | '_ \ | | | ' \  / _` |
# |_||_| \___/ |_|_|_| |_| |_||_| \__, |   \_____|    |_|   |_|   \___/ |_.__/ |_| |_||_| \__, |
#                                 |___/                                                   |___/ 
[gcode_macro ACTIVATE_PROBE]
description: Gcode when Probe is used
gcode:
    {% set auto_offset = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use auto_offset instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> auto_offset.samples
    {% set MAX_TEMP = auto_offset.dynamic_probe_temp_max + 5 %}
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}

    {% if TARGET_TEMP > auto_offset.dynamic_probe_temp_max %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, auto_offset.dynamic_probe_temp_max)) }
        M109 S{ auto_offset.dynamic_probe_temp_max }
    {% else %}
        # Temperature target is already low enough, but nozzle may still be too hot.
        {% if ACTUAL_TEMP > MAX_TEMP %}
            { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
            TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
        {% endif %}
    {% endif %}

[homing_override]
axes: xyz
gcode:
  {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params and 'E' not in params and 'P' not in params %}

  {% if 'E' in params %}
    HOME_ENDSTOP
  {% endif %}

  {% if 'P' in params %}
    HOME_PROBE
  {% endif %}

  {% if home_all or 'X' in params %}
    HOME_X
  {% endif %}
  
  {% if home_all or 'Y' in params %}
    HOME_Y
  {% endif %}
  
  {% if home_all or 'Z' in params %}
    HOME_PROBE
  {% endif %}


[gcode_macro HOME_X]
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 X
    # Move away
    G91
    G0 X-10 F1200
    
    # Wait just a secondâ¦ (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}


[gcode_macro HOME_Y]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 Y
    # Move away
    G91
    G0 Y-10 F1200

    # Wait just a secondâ¦ (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}


[gcode_macro HOME_PROBE]
gcode:
    {% set PROBE_OFFSET = printer.configfile.settings.probe.z_offset %}
    {% set PROBE_RETRACT = printer.configfile.settings.probe.sample_retract_dist %}
    {% set PROBE_LIFT_SPEED = printer.configfile.settings.probe.lift_speed %}
    {% set PROBE_SPEED = printer.configfile.settings.probe.speed %}
    {% set th = printer.toolhead %}

    G90
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} F30000 # move to bed center
    SET_KINEMATIC_POSITION Z={th.axis_maximum.z} # set Z to max height in order to get max possible travel distance without error
    PROBE SAMPLES=1 PROBE_SPEED={PROBE_SPEED*1.5} # Use probe speed * 1.5
    G91
    G0 Z{PROBE_RETRACT - PROBE_OFFSET} F{PROBE_LIFT_SPEED*60} # lift probe for second pass
    PROBE SAMPLES=1 PROBE_SPEED={PROBE_SPEED/2} # second pass is probe speed / 2
    SET_KINEMATIC_POSITION Z={PROBE_OFFSET} # Force set position at probe trigger point. Use probe offset to get Z0 position 
    G91
    G0 Z10 # lift up 10mm


[gcode_macro HOME_ENDSTOP]
gcode:
    {% set auto_offset = printer['gcode_macro AUTO_OFFSET_VARIABLES'] %} # use auto_offset instead of printer['gcode_macro AUTO_OFFSET_VARIABLES']. Example printer['gcode_macro AUTO_OFFSET_VARIABLES.samples'] -> auto_offset.samples
    {% set thermal_comp = printer['gcode_macro THERMAL_COMPENSATION_VARIABLES'] %}
    {% set HOME_TEMP = 150 %} # Home temp. A minimum temperature ist required to squish away any material ooze
    {% set ACTUAL_TEMP = printer.extruder.temperature %} # current extruder temp
    {% set TARGET_TEMP = printer.extruder.target %} # extruder target temp
    {% set MIN_TEMP = HOME_TEMP - 5 %} # minimum allowed homing temp. Home temp - 5Â°C
    {% set th = printer.toolhead %}

    {% if TARGET_TEMP < HOME_TEMP %} # increase temp if target too low
      AUTO_OFFSET_INFO TEXT='{'Extruder temperature target of %.1fC is too low, increasing to %.1fC'|format(TARGET_TEMP, HOME_TEMP)|string}'
      M109 S{HOME_TEMP}

     {% else %}
        {% if ACTUAL_TEMP < MIN_TEMP %} #increase temp if actual temp too low
            AUTO_OFFSET_INFO TEXT='{'Extruder temperature %.1fC is still too low, waiting until above %.1fC'|format(ACTUAL_TEMP, MIN_TEMP)|string}'
            TEMPERATURE_WAIT SENSOR=extruder MINIMUM={MIN_TEMP}
        {% endif %}
     {% endif %}
    G90
    G0 X{printer["gcode_macro POSITION_Z_ENDSTOP"].endstop_x} Y{printer["gcode_macro POSITION_Z_ENDSTOP"].endstop_y} F30000 # move to endstop position
    G28 Z # home Z
    G91
    G0 Z1 # move up 1mm. I don't recommend changing this value

#####################################################################
# 	Misc
#####################################################################
[force_move] # force_move is required for HOME_PROBE
enable_force_move: True

[gcode_macro AUTO_OFFSET_ERROR]
description: Error macro of Auto_Offset # used to execute commands before erroring. Klipper will skip them if error is called directly
gcode:
    {% set MESSAGE = params.TEXT|default("Unknown Error")|string %} # set errortext
    { action_raise_error(MESSAGE) } # error

[gcode_macro AUTO_OFFSET_INFO]
description: Info macro of Auto_Offset # used to execute commands before info messages. Klipper will skip them sometimes
gcode:
    {% set MESSAGE = params.TEXT|default("")|string %} # set infotext
    { action_respond_info(MESSAGE) } # error

[gcode_macro AUTO_OFFSET_ERROR_LIFT]
description: Error macro of Auto_Offset # errors with z-lift and turns heaters off
gcode:
    {% set MESSAGE = params.TEXT|default("Unknown Error")|string %} # set errortext
    {% set Z_HEIGHT = params.Z|default(25)|float %}
    {% set SPEED = params.F|default(printer.gcode_move.speed)|int %}

    TURN_OFF_HEATERS # turn off all heaters

    {% if printer.toolhead.homed_axes != "xyz" %}
      AUTO_OFFSET_ERROR TEXT='{MESSAGE}' # use error macro if unhomed

    {% else %}
      {% set Z_HEIGHT = [Z_HEIGHT, printer.toolhead.axis_maximum.z - printer.toolhead.position.z]|min|float%} # compute the minimum safe upward move size
      G91
      G1 Z{Z_HEIGHT} F{SPEED} # move
      M18 # turn off motors

      AUTO_OFFSET_ERROR TEXT='{MESSAGE}' # use error macro
    {% endif %}
